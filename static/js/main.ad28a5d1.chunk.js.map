{"version":3,"sources":["components/boardContainer/StartGameReduxForm/StartGameReduxForm.module.css","components/boardContainer/LeaderBoard/LeaderBoard.module.css","api/api.js","redux/boardReducer.js","components/boardContainer/StartGameReduxForm/StartGameReduxForm.jsx","components/boardContainer/BoardGame/square/Square.jsx","components/boardContainer/BoardGame/GameBoard.jsx","components/boardContainer/LeaderBoard/LeaderBoard.jsx","components/common/Loader.jsx","components/boardContainer/BoardContainer.jsx","App.js","serviceWorker.js","redux/redux-store.js","index.js","components/boardContainer/BoardContainer.module.css","components/common/Loader.module.css","assets/img/Spinner-1s-200px.svg"],"names":["module","exports","instance","axios","baseURL","headers","winnersAPI","get","then","response","data","winner","date","post","initialState","numbersquares","squares","numberOfClicking","numberOfOverTime","winners","settings","restart","setWinnersAC","type","boardReducer","state","action","numberSquares","array","i","push","id","active","clicked","timeIsOver","map","square","reduxForm","form","props","onSubmit","handleSubmit","className","style","Field","name","component","gameMode","placeholder","playBtn","Square","disabled","undefined","color","onClick","clickedSquaresAC","backgroundColor","GameBoard","getBoardStyle","key","getSquareColor","LeaderBord","li","LeadersList","list","Loader","src","loader","alt","BoardContainer","startGame","startingData","prevId","delay","restartGameAC","easyMode","field","setNumberSquaresAC","normalMode","hardMode","alert","intervalId","setSquaresAC","intervalIds","forEach","clearInterval","setInterval","myWinning","Math","ceil","length","computerWinning","now","moment","format","putWinnerThunkCreator","randomId","getRandomId","randomSquaresAC","setTimeIsOverAC","this","getWinnersThunkCreator","getSettingsThunkCreator","emptyIds","filter","floor","random","main","React","Component","mapDispatchToProps","randomSquaresId","squareId","dispatch","status","connect","board","App","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad28a5d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"StartGameReduxForm_form__2bAZj\",\"gameMode\":\"StartGameReduxForm_gameMode__2aIYR\",\"name\":\"StartGameReduxForm_name__2YJg4\",\"playBtn\":\"StartGameReduxForm_playBtn__30pq3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeadersList\":\"LeaderBoard_LeadersList__xBpIQ\",\"list\":\"LeaderBoard_list__BINEJ\",\"li\":\"LeaderBoard_li__1cSFZ\",\"winner\":\"LeaderBoard_winner__YrddB\",\"date\":\"LeaderBoard_date__2xonO\"};","import * as axios from \"axios/index\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'http://starnavi-frontend-test-task.herokuapp.com/',\r\n  headers: {\r\n\r\n  }\r\n});\r\n\r\nexport const winnersAPI = {\r\n  getWinners() {\r\n    return instance.get('winners')\r\n      .then(response => response.data)\r\n  },\r\n  getSettings() {\r\n    return instance.get('game-settings')\r\n      .then(response => response.data)\r\n  },\r\n  putWinner(winner, date) {\r\n    return instance.post('winners', { winner, date})\r\n      .then(response => response)\r\n  }\r\n\r\n\r\n}","import {winnersAPI} from \"../api/api\";\r\nconst SET_NUMBER_SQUARES = 'SET-NUMBER-SQUARES';\r\nconst SET_SQUARES = 'SET-SQUARES';\r\nconst RANDOM_SQUARES = 'RANDOM-SQUARES';\r\nconst CLICKED_SQUARES = 'CLICKED-SQUARES';\r\nconst SET_TIME_IS_OVER = 'SET-TIME-IS-OVER';\r\nconst SET_WINNERS = 'SET-WINNERS';\r\nconst SET_SETTINGS = 'SET-SETTINGS';\r\nconst RESTART_GAME = 'RESTART-GAME';\r\n\r\nlet initialState = {\r\n  numbersquares: null,\r\n  squares: [],\r\n  numberOfClicking: null,\r\n  numberOfOverTime: null,\r\n  winners: null,\r\n  settings: null,\r\n  restart: false\r\n};\r\n\r\n\r\nconst boardReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case  SET_NUMBER_SQUARES: {\r\n      return {\r\n        ...state,\r\n        numbersquares: action.numberSquares\r\n      }\r\n    }\r\n    case SET_SQUARES: {\r\n      return {\r\n        ...state,\r\n        squares: (function () {\r\n          let array = []\r\n          for (let i = state.numbersquares; i > 0; i--) {\r\n            array.push({id: i, active: false, clicked: false, timeIsOver: false})\r\n          }\r\n          return array\r\n        })()\r\n      }\r\n    }\r\n    case RANDOM_SQUARES: {\r\n\r\n      return {\r\n        ...state,\r\n        squares: state.squares.map(square => square.id === action.id ? {...square, active: true} : square)\r\n\r\n      }\r\n    }\r\n    case  CLICKED_SQUARES: {\r\n      return {\r\n        ...state,\r\n        squares: state.squares.map(square => square.id === action.id ? {...square, clicked: true} : square),\r\n        numberOfClicking: state.numberOfClicking + 1\r\n      }\r\n    }\r\n    case SET_TIME_IS_OVER: {\r\n      return {\r\n        ...state,\r\n        squares: state.squares.map(square => square.id === action.id ? {...square, timeIsOver: true} : square),\r\n        numberOfOverTime: ++state.numberOfOverTime\r\n      }\r\n    }\r\n    case SET_WINNERS: {\r\n      return {\r\n        ...state,\r\n        winners: action.winners\r\n      }\r\n    }\r\n    case SET_SETTINGS: {\r\n      return {\r\n        ...state,\r\n        settings: {...action.settings}\r\n      }\r\n    }case RESTART_GAME: {\r\n    return {\r\n      ...state,\r\n      numbersquares: null,\r\n      squares: state.squares.map(square => {\r\n        return {...square, active: null, clicked : null, timeIsOver: null}\r\n      }),\r\n      numberOfClicking: null,\r\n      numberOfOverTime: null,\r\n      restart:  action.restart\r\n\r\n    }\r\n  }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport const setSquaresAC = () => ({type: SET_SQUARES});\r\nexport const setNumberSquaresAC = (numberSquares) => ({type: SET_NUMBER_SQUARES, numberSquares: numberSquares});\r\nexport const randomSquaresAC = (randomSquaresId) => ({type: RANDOM_SQUARES, id: randomSquaresId});\r\nexport const setTimeIsOverAC = (squareId) => ({type: SET_TIME_IS_OVER, id: squareId});\r\nexport const clickedSquaresAC = (squareId) => ({type: CLICKED_SQUARES, id: squareId});\r\nconst setWinnersAC = (winners) => ({type: SET_WINNERS, winners: winners});\r\nconst setSettingsAC = (settings) => ({type: SET_SETTINGS, settings: settings});\r\nexport const restartGameAC = (restart) => ({type: RESTART_GAME, restart: restart});\r\n\r\n\r\nexport const getWinnersThunkCreator = () => {\r\n  return (dispatch) => {\r\n    winnersAPI.getWinners()\r\n      .then(data => dispatch(setWinnersAC(data)));\r\n  }\r\n};\r\n\r\nexport const getSettingsThunkCreator = () => {\r\n  return (dispatch) => {\r\n    winnersAPI.getSettings()\r\n      .then(data => dispatch(setSettingsAC(data)))\r\n  }\r\n}\r\n\r\nexport const putWinnerThunkCreator = (winner, date) => {\r\n  return (dispatch) => {\r\n    winnersAPI.putWinner(winner, date)\r\n      .then(response => {\r\n        if(response.status === 200) {\r\n          dispatch(setWinnersAC(response.data))\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\n\r\nexport default boardReducer;","import React from 'react';\r\nimport style from './StartGameReduxForm.module.css'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nconst  StartGameReduxForm  = (props) => {\r\n\r\n\r\n\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className={style.form}>\r\n      <Field name=\"gameMode\" component=\"select\" className={style.gameMode}>\r\n        <option>Pick game mode</option>\r\n        <option >Hard</option>\r\n        <option>Medium</option>\r\n        <option>Easy</option>\r\n      </Field>\r\n      <Field component={'input'}  placeholder={'Please write your name'} name={'name'} className={style.name}/>\r\n      {props.restart?   <button className={style.playBtn} >PLAY AGAIN</button> : <button className={style.playBtn}>PLAY</button>}\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({form: 'Game'})(StartGameReduxForm)","import React from 'react';\r\nimport './square.css'\r\n\r\nexport default function Square(props) {\r\n\r\n\r\n  let onClick = () => {\r\n    props.clickedSquaresAC(props.id)\r\n  };\r\n\r\n  return (\r\n    <button className={`square${props.clicked? 'click' : ''}`} disabled={props.color === undefined || props.timeIsOver} onClick={onClick} style={{backgroundColor:  props.color}}  >\r\n\r\n    </button>\r\n  )\r\n}","import React from 'react';\r\nimport  './gameBoard.css'\r\nimport Square from \"./square/Square\";\r\n\r\nexport default function GameBoard (props) {\r\n\r\n\r\n  let renderSquares = () => {\r\n\r\n    let squares = props.squares.map(square => <Square key={square.id} id={square.id}\r\n                                                           color={props.getSquareColor(square)}\r\n                                                           clicked={square.clicked}\r\n                                                           clickedSquaresAC={props.clickedSquaresAC}\r\n                                                           timeIsOver={square.timeIsOver}/>);\r\n\r\n    return squares;\r\n  };\r\n\r\n  let getBoardStyle = () => {\r\n    switch (props.numbersquares) {\r\n\r\n      case 25 :{\r\n\r\n        return 'boardEasy'\r\n      }\r\n      case 100: {\r\n        return 'boardMedium'\r\n      }\r\n      case 225: {\r\n        return 'boardHard'\r\n      }\r\n      default: {\r\n        return ''\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={getBoardStyle()}>\r\n      {renderSquares()}\r\n\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport style from './LeaderBoard.module.css'\r\n\r\n\r\nexport default function LeaderBord(props) {\r\n\r\n  var winners = props.winners.map(winner => {\r\n\r\nreturn <li className={style.li} key={winner.id}><span className={style.winner}>{winner.winner}</span> <span className={style.date}>{winner.date}</span></li>\r\n  })\r\n\r\n\r\n  return (\r\n    <div className={style.LeadersList}>\r\n      <h1>Leader Board</h1>\r\n      <ul className={style.list}>\r\n        {winners}\r\n      </ul>\r\n\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport  style from './Loader.module.css'\r\nimport loader from '../../assets/img/Spinner-1s-200px.svg'\r\n\r\n\r\nconst Loader = () => {\r\n  return (\r\n      <>\r\n        <img src={loader} alt=\"louder\" className={style.loader}/>\r\n      </>\r\n  )\r\n}\r\nexport default Loader;","import React from 'react';\r\nimport style from './BoardContainer.module.css';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n  setSquaresAC, randomSquaresAC, clickedSquaresAC, setTimeIsOverAC, getWinnersThunkCreator,\r\n  getSettingsThunkCreator, setNumberSquaresAC, putWinnerThunkCreator, restartGameAC\r\n} from \"../../redux/boardReducer\";\r\nimport StartGameReduxForm from \"./StartGameReduxForm/StartGameReduxForm\";\r\nimport GameBoard from \"./BoardGame/GameBoard\";\r\nimport LeaderBord from \"./LeaderBoard/LeaderBoard\";\r\nimport Loader from \"../common/Loader\";\r\nimport moment from \"moment\";\r\n\r\n\r\nclass BoardContainer extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.intervalIds = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getWinnersThunkCreator();\r\n    this.props.getSettingsThunkCreator();\r\n  }\r\n\r\n  startGame = (startingData) => {\r\n    this.props.restartGameAC(true)\r\n    let prevId;\r\n    let delay;\r\n    let numberSquares;\r\n\r\n    if (startingData.name === undefined) {\r\n      alert('Please write your name');\r\n      return\r\n    }\r\n\r\n    switch (startingData.gameMode) {\r\n      case \"Easy\":\r\n        delay = this.props.settings.easyMode.delay;\r\n        numberSquares = this.props.settings.easyMode.field * this.props.settings.easyMode.field;\r\n        this.props.setNumberSquaresAC(numberSquares);\r\n        break;\r\n      case  \"Medium\":\r\n        delay = this.props.settings.normalMode.delay;\r\n        numberSquares = this.props.settings.normalMode.field * this.props.settings.normalMode.field;\r\n        this.props.setNumberSquaresAC(numberSquares);\r\n        break;\r\n      case  \"Hard\":\r\n        delay = this.props.settings.hardMode.delay;\r\n        numberSquares = this.props.settings.hardMode.field * this.props.settings.hardMode.field;\r\n        this.props.setNumberSquaresAC(numberSquares);\r\n        break;\r\n      default:\r\n        alert('Please choose game mode');\r\n        return\r\n    }\r\n    this.props.setSquaresAC();\r\n\r\n    let intervalId;\r\n\r\n    let goAhead = () => {\r\n\r\n      if (this.props.restart === true) {\r\n        this.intervalIds.forEach(intervalId => clearInterval(intervalId))\r\n      }\r\n\r\n      intervalId = setInterval(() => {\r\n\r\n        let myWinning = Math.ceil(this.props.squares.length / 2) === this.props.numberOfClicking;\r\n        let computerWinning = Math.ceil(this.props.squares.length / 2) === this.props.numberOfOverTime - this.props.numberOfClicking;\r\n\r\n        if (myWinning) {\r\n          let now = moment().format('HH:mm; DD MMMM  YYYY');\r\n          this.props.putWinnerThunkCreator(startingData.name, now);\r\n          alert('You have won')\r\n          clearInterval(intervalId)\r\n          return;\r\n        } else if (computerWinning) {\r\n          let now = moment().format('HH:mm; DD MMMM  YYYY');\r\n          this.props.putWinnerThunkCreator('Computer', now);\r\n          alert('Computer have won')\r\n          clearInterval(intervalId)\r\n          return;\r\n        }\r\n\r\n        const randomId = this.getRandomId();\r\n        this.props.randomSquaresAC(randomId);\r\n\r\n        if (prevId) {\r\n          this.props.setTimeIsOverAC(prevId);\r\n        }\r\n        prevId = randomId;\r\n      }, delay);\r\n\r\n      this.intervalIds.push(intervalId)\r\n    };\r\n    goAhead();\r\n  };\r\n\r\n\r\n  getRandomId() {\r\n    const emptyIds = this.props.squares.filter(square => square.active === false).map(square => square.id);\r\n    const uniqId = emptyIds[Math.floor(Math.random() * emptyIds.length)];\r\n    return uniqId;\r\n  }\r\n\r\n  getSquareColor({active, clicked, timeIsOver}) {\r\n    let color;\r\n\r\n    if (active && !clicked && !timeIsOver) {\r\n      color = 'blue';\r\n    }\r\n    else if (active && !clicked && timeIsOver) {\r\n      color = 'red';\r\n    }\r\n    return color\r\n  };\r\n\r\n\r\n  render() {\r\n\r\n    if (!this.props.winners) {\r\n      return <Loader/>\r\n    }\r\n\r\n    return (\r\n      <div className={style.main}>\r\n        <StartGameReduxForm onSubmit={this.startGame} restart={this.props.restart}/>\r\n        <GameBoard squares={this.props.squares} getSquareColor={this.getSquareColor}\r\n                   clickedSquaresAC={this.props.clickedSquaresAC} numbersquares={this.props.numbersquares}/>\r\n        <LeaderBord winners={this.props.winners}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numbersquares: state.board.numbersquares,\r\n  squares: state.board.squares,\r\n  numberOfClicking: state.board.numberOfClicking,\r\n  numberOfOverTime: state.board.numberOfOverTime,\r\n  winners: state.board.winners,\r\n  settings: state.board.settings,\r\n  restart: state.board.restart\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  setNumberSquaresAC,\r\n  setSquaresAC,\r\n  randomSquaresAC,\r\n  setTimeIsOverAC,\r\n  clickedSquaresAC,\r\n  getWinnersThunkCreator,\r\n  getSettingsThunkCreator,\r\n  putWinnerThunkCreator,\r\n  restartGameAC\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer)","import React from 'react';\nimport './App.css';\nimport BoardContainer from \"./components/boardContainer/BoardContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoardContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport   thunkMiddleware from 'redux-thunk'\r\nimport boardReducer from \"./boardReducer\";\r\n\r\nlet reducers = combineReducers({\r\n  form: formReducer,\r\n  board: boardReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nwindow.store = store\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"BoardContainer_main__2f1Pt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__1wVrF\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.b34c8640.svg\";"],"sourceRoot":""}